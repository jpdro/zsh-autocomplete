#!/bin/zsh

.autocomplete.key.precmd() {
  emulate -L zsh -o extendedglob -o NO_shortloops -o warncreateglobal
  add-zsh-hook -d precmd .autocomplete.key.precmd

  if [[ ! -v key ]]; then
    # This file can be generated interactively with `autoload -Uz zkbd && zkbd`.
    # See http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Keyboard-Definition
    local zkbd=${ZDOTDIR:-$HOME}/.zkbd/${TERM}-${VENDOR}
    [[ -r $zkbd ]] && source $zkbd

    [[ -v key ]] || typeset -gA key
  fi

  .autocomplete.key.set Tab '^I' ht
  .autocomplete.key.set BackTab '^[[Z' kcbt
  .autocomplete.key.set Up '^[[A' kcuu1
  .autocomplete.key.set Down '^[[B' kcud1
  .autocomplete.key.set Right '^[[C' kcuf1
  .autocomplete.key.set Left '^[[D' kcub1
  .autocomplete.key.set End '^[[F' kend
  .autocomplete.key.set Home '^[[H' khome
  .autocomplete.key.set PageUp '^[[5~' kpp
  .autocomplete.key.set PageDown '^[[6~' knp

  # These are not defined in `terminfo`.
  .autocomplete.key.set ControlSpace '^@'
  .autocomplete.key.set LineFeed '^J'
  .autocomplete.key.set Return '^M'
  .autocomplete.key.set DeleteList '^D'
  case $( bindkey -lL main ) in
    *emacs*)
      .autocomplete.key.set Undo '^_'
      .autocomplete.key.set ForwardWord '^[f'
      .autocomplete.key.set BackwardWord '^[b'
      .autocomplete.key.set BeginningOfBuffer '^[<'
      .autocomplete.key.set EndOfBuffer '^[>'
      ;;
    *vi*)
      .autocomplete.key.set Undo '^[u'
      .autocomplete.key.set ForwardWord '^[W'
      .autocomplete.key.set BackwardWord '^[B'
      .autocomplete.key.set BeginningOfBuffer 'gg'
      .autocomplete.key.set EndOfBuffer '$'
      ;;
  esac
}

.autocomplete.key.set() {
  emulate -L zsh -o extendedglob -o NO_shortloops -o warncreateglobal
  if [[ -z $key[$1] ]]; then
    key[$1]="$terminfo[$3]"; [[ -n $key[$1] && -v terminfo[smkx] ]] || key[$1]="$2"
  fi
}

emulate -L zsh -o extendedglob -o NO_shortloops -o warncreateglobal
zmodload zsh/terminfo

# Enable and use terminfo codes, if possible.
if [[ -v terminfo[smkx] ]]; then
  add-zsh-hook -d precmd .autocomplete.key.app-mode
  add-zsh-hook precmd .autocomplete.key.app-mode

  .autocomplete.key.app-mode() {
    echoti smkx
  }

  if [[ -v terminfo[rmkx] ]]; then
    add-zsh-hook -d preexec .autocomplete.key.raw-mode
    add-zsh-hook preexec .autocomplete.key.raw-mode

    .autocomplete.key.raw-mode() {
      echoti rmkx
    }
  fi
fi

add-zsh-hook precmd .autocomplete.key.precmd
